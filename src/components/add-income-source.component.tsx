import {
  IonAlert,
  IonIcon,
  IonItem,
  IonLabel,
  IonList,
  IonListHeader,
  IonNote,
} from "@ionic/react";
import { useEffect, useState } from "react";
import { addCircleOutline } from "ionicons/icons";
import useDataHook from "../hooks/use-data.hook";

type IncomeSource = { name: string; income: string };

export default function () {
  const { getData, setData } = useDataHook();
  const [showAlert, setShowAlert] = useState(false);
  const [incomeSources, setIncomeSources] = useState<IncomeSource[]>([]);

  useEffect(() => {
    async function fetchIncomeSources() {
      setIncomeSources(await getData("incomeSources", []));
    }

    fetchIncomeSources();
  }, []);

  return (
    <>
      <IonList inset>
        <IonItem button detail={false} onClick={() => setShowAlert(true)}>
          <IonIcon
            aria-hidden
            slot="start"
            icon={addCircleOutline}
            color="primary"
          />
          <IonLabel color="primary">Add Income Source</IonLabel>
        </IonItem>
      </IonList>

      {incomeSources.length > 0 && (
        <>
          <IonListHeader>Sources</IonListHeader>
          <IonList inset>
            {incomeSources.map(({ name, income }) => (
              <IonItem key={name}>
                <IonLabel>{name}</IonLabel>
                <IonNote slot="end">{getFormatted(income)}</IonNote>
              </IonItem>
            ))}
          </IonList>
        </>
      )}

      <IonAlert
        isOpen={showAlert}
        header="Add Income Source"
        message="Please enter the name of your income source and the income generated by it."
        buttons={[
          { text: "Cancel", role: "cancel" },
          { text: "Add", role: "confirm" },
        ]}
        inputs={[
          { type: "text", name: "name", placeholder: "Name (required)" },
          { type: "number", name: "income", placeholder: "Income (required)" },
        ]}
        onDidDismiss={({ detail }) => {
          setShowAlert(false);

          if (!detail.data || detail.role !== "confirm") {
            return;
          }

          const { name, income } = detail.data.values as IncomeSource;

          if (!name.length || !income.length) {
            return;
          }

          const newIncomeSources = [...incomeSources, { name, income }];
          setIncomeSources(newIncomeSources);

          setData("incomeSources", newIncomeSources);
        }}
      />
    </>
  );
}

const formatter = new Intl.NumberFormat(window.navigator.language);

function getFormatted(income: string) {
  return formatter.format(Number(income));
}
